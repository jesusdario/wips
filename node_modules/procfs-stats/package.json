{
  "name": "procfs-stats",
  "version": "0.0.4",
  "description": "get detailed information (more than ps, top etc) about running process on linux machines from node.",
  "main": "index.js",
  "scripts": {
    "test": "tape test/*.js"
  },
  "author": {
    "name": "Ryan Day",
    "email": "soldair@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "tape": "~2.3.2"
  },
  "dependencies": {
    "hexip": "~1.0.1"
  },
  "repository": {
    "url": "git://github.com/soldair/node-procfs-stats.git"
  },
  "gitHead": "feca2a940805b31f9e7d5c0bd07c4e3f8d3d5303",
  "readme": "procfs-stats\n============\n\nget detailed information about running process and threads on linux machines from node. more than ps/top/iostat alone\n\n```js\n\nvar procfs = require('procfs-stats');\nvar ps = procfs(process.pid);\n\nps.io(function(err,io){\n\n  console.log('my process has done this much io',io);\n\n})\n\n```\n\nthis only works on linux right now i expect. some things may work on other systems that have some support for procfs.\n\n## hope\n\nit would be so cool to have a higher level module that unifies system monitoring scripts in such a way as each os specific implementation can export a common interface like this and we can have xplatform monitoring helpers!! does windows have any external process introspection api?!\n\n## API\n\n * <a href=\"#ctor\">procfs(pid)</a>\n * <a href=\"#pidstats-io\">ps.io(cb)</a>\n * <a href=\"#pidstats-stat\">ps.stat(cb)</a>\n * <a href=\"#pidstats-statm\">ps.statm(cb)</a>\n * <a href=\"#pidstats-status\">ps.status(cb)</a>\n * <a href=\"#pidstats-env\">ps.env(cb)</a>\n * <a href=\"#pidstats-cwd\">ps.cwd(cb)</a>\n * <a href=\"#pidstats-cwd\">ps.argv(cb)</a>\n * <a href=\"#pidstats-fds\">ps.fds(cb)</a>\n * <a href=\"#pidstats-threads\">ps.threads(cb)</a>\n * <a href=\"#pidstats-thread\">ps.thread(tid)</a>\n * <a href=\"#cpu\">procfs.cpu(cb)</a>\n * <a href=\"#fd\">procfs.fd(cb)</a>\n * <a href=\"#tcp\">procfs.tcp(cb)</a>\n * <a href=\"#udp\">procfs.udp(cb)</a>\n * <a href=\"#unix\">procfs.unix(cb)</a>\n * <a href=\"#net\">procfs.net(cb)</a>\n * <a href=\"#disk\">procfs.disk(cb)</a>\n * <a href=\"#wifi\">procfs.wifi(cb)</a>\n * <a href=\"#works\">procfs.works()</a>\n\n\n<a name=\"ctor\"></a>\n### procfs(pid)\n  - returns PidStats ps\n  - PidStats is an object with methods documented blelow with the prefix \"ps.\"\n\n```js\n\nvar ps = procfs(process.pid)\nconsole.log(ps);\n\n```\n\n<a name=\"pidstats-io\"></a>\n### ps.io(cb)\n  - from /proc/pid/io\n  - disk io stats\n\n```js\n\n { rchar: '84167',\n  wchar: '15978',\n  syscr: '107',\n  syscw: '47',\n  read_bytes: '0',\n  write_bytes: '12288',\n  cancelled_write_bytes: '0' }\n\n```\n \n<a name=\"pidstats-stat\"></a>\n### ps.stat(cb)\n  - from /proc/pid/stat\n  - mixed detailed process stats\n  - calls back with \n\n```js\n\n{ pid: '8157',\n  comm: '(node)',\n  state: 'R',\n  ppid: '8156',\n  pgrp: '8150',\n  session: '1703',\n  tty_nr: '34822',\n  tpgid: '8150',\n  flags: '4202496',\n  minflt: '3788',\n  cminflt: '0',\n  majflt: '0',\n  cmajflt: '0',\n  utime: '8',\n  stime: '1',\n  cutime: '0',\n  cstime: '0',\n  priority: '20',\n  nice: '0',\n  num_threads: '6',\n  itrealvalue: '0',\n  starttime: '62912348',\n  vsize: '910020608',\n  rss: '3277',\n  rsslim: '18446744073709551615',\n  startcode: '4194304',\n  endcode: '12964340',\n  startstack: '140736757717536',\n  kstkesp: '140736757701400',\n  kstkeip: '140541704641018',\n  signal: '0',\n  blocked: '0',\n  sigignore: '4096',\n  sigcatch: '16898',\n  wchan: '18446744073709551615',\n  nswap: '0',\n  cnswap: '0',\n  exit_signal: '17',\n  processor: '0',\n  rt_priority: '0',\n  policy: '0',\n  delayacct_blkio_ticks: '0',\n  guest_time: '0',\n  cguest_time: '0' }\n\n```\n\n<a name=\"pidstats-statm\"></a>\n### ps.statm(cb)\n  - from /proc/pid/statm\n  - memory stats\n  - calls back with an object of mem stats\n\n```js\n\n{ size: '222173',\n  resident: '3342',\n  share: '1284',\n  text: '2142',\n  lib: '0',\n  data: '215399',\n  dt: '0' }\n\n```\n\n<a name=\"pidstats-status\"></a>\n### ps.status(cb)\n  - from /proc/pid/status\n  - mixed process stats with more human friendly formatting\n\n```js\n\n{ Name: 'node',\n  State: 'S (sleeping)',\n  Tgid: '8157',\n  Pid: '8157',\n  PPid: '8156',\n  TracerPid: '0',\n  Uid: '1000\\t1000\\t1000\\t1000',\n  Gid: '1000\\t1000\\t1000\\t1000',\n  FDSize: '64',\n  Groups: '4 20 24 27 30 46 109 121 1000 ',\n  VmPeak: '954740 kB',\n  VmSize: '888692 kB',\n  VmLck: '0 kB',\n  VmPin: '0 kB',\n  VmHWM: '13464 kB',\n  VmRSS: '13368 kB',\n  VmData: '861452 kB',\n  VmStk: '144 kB',\n  VmExe: '8568 kB',\n  VmLib: '4084 kB',\n  VmPTE: '172 kB',\n  VmSwap: '0 kB',\n  Threads: '6',\n  SigQ: '2/63628',\n  SigPnd: '0000000000000000',\n  ShdPnd: '0000000000000000',\n  SigBlk: '0000000000000000',\n  SigIgn: '0000000000001000',\n  SigCgt: '0000000180004202',\n  CapInh: '0000000000000000',\n  CapPrm: '0000000000000000',\n  CapEff: '0000000000000000',\n  CapBnd: 'ffffffffffffffff',\n  Cpus_allowed: 'ff',\n  Cpus_allowed_list: '0-7',\n  Mems_allowed: '00000000,00000001',\n  Mems_allowed_list: '0',\n  voluntary_ctxt_switches: '39',\n  nonvoluntary_ctxt_switches: '29' }\n\n```\n\n<a name=\"pidstats-env\"></a>\n### ps.env(cb)\n  - from /proc/pid/environ\n  - calls back with the array of environment variables as they were defined when the process started.\n\n```js\n  \n[ ...\n  'MANPATH=:/usr/local/avr/man:/usr/local/avr/man',\n  'LS_OPTIONS=--color=auto',\n  'npm_config_git=git',\n  'npm_config_optional=true',\n  'EDITOR=vim',\n  'npm_config_email=soldair@',\n  'npm_config_json=' ]\n\n```\n\n<a name=\"pidstats-cwd\"></a>\n### ps.cwd(cb)\n  - from /proc/pid/cwd\n  - calls back with the working directory of the process when it was started \n\n```js\n\n\"/home/soldair/opensource/node-procfs-stats\"\n\n```\n\n### ps.argv(cb)\n  - from /proc/pid/cmdline\n  - calls back with an array of command line arguments used to run the target process\n\nthese are the args for the command ```node test/pid_argv.js --example```\n\n```js\n[ 'node',\n  'test/pid_argv.js',\n  '--example' ]\n```\n\n<a name=\"pidstats-fds\"></a>\n### ps.fds(cb)\n  - from /proc/pid/fds\n  - returns an array of paths to file descriptors in the procfs fds directory for this process. \n\n```js\n\n[ '/proc/8157/fd/0',\n  '/proc/8157/fd/1',\n  '/proc/8157/fd/10',\n  '/proc/8157/fd/2',\n  '/proc/8157/fd/9' ]\n\n```\n\n<a name=\"pidstats-threads\"></a>\n### ps.threads(cb)\n  - from /proc/pid/tasks\n  - calls back with an array of the ids/names of each task in the procfs task dir for that pid.\n\n```js\n\n[ '10299', '10300', '10301', '10302', '10303', '10304' ]\n\n```\n\n<a name=\"pidstats-thread\"></a>\n### ps.thread(tid)\n  - returns PidStats object for taskid\n\nthe exported function also has these \"static\" methods.\n\n```js\n\nvar thread = ps.thread(tid);\n\n```\n\n<a name=\"cpu\"></a>\n### procfs.cpu(cb)\n  - from /proc/stat\n  - calls back with an object like this\n\n```js\n\n{ cpu: \n   { user: '22865094',\n     nice: '8419',\n     system: '41080741',\n     idle: '120838211',\n     iowait: '31250',\n     irq: '13',\n     softirq: '38550',\n     steal: '0',\n     guest: '0',\n     guest_nice: '0' },\n  cpu0: \n   { user: '5417204',\n     nice: '1535',\n     system: '8517931',\n     idle: '32167970',\n     iowait: '13554',\n     irq: '10',\n     softirq: '33485',\n     steal: '0',\n     guest: '0',\n     guest_nice: '0' },\n  ... more cpus\n  intr: '779069953 10 0 0 ... so many zeros ... 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0',\n  ctxt: '1272813489',\n  btime: '1389119192',\n  processes: '104169',\n  procs_running: '2',\n  procs_blocked: '0',\n  softirq: '387055666 39 219612430 63769 2305517 2468782 39 16208198 61170901 82217 85143774' }\n\n```\n\n<a name=\"fd\"></a>\n### procfs.fd(fdPath,cb)\n  - from /proc/pid/fds/fd and /proc/pid/fdinfo\n  - fdPath is the full path \n  - calls back with an object \n  - stat is an fs.Stats object\n  - full path to file. \n  - in the case of a socket a string \"socket[inode]\" or some such will be returned. you can lookup the inode in the net.tcp||udp||unix table for even more info!\n\n```js\n\n{ fd: '/proc/8306/fd/2',\n  path: '/dev/pts/6',\n  info: { pos: '0', flags: '02100002' },\n  stat: \n   { dev: 11,\n     mode: 8576,\n     nlink: 1,\n     uid: 1000,\n     gid: 5,\n     rdev: 34822,\n     blksize: 1024,\n     ino: 9,\n     size: 0,\n     blocks: 0,\n     atime: Tue Jan 14 2014 17:19:04 GMT-0800 (PST),\n     mtime: Tue Jan 14 2014 17:19:04 GMT-0800 (PST),\n     ctime: Thu Jan 09 2014 14:28:29 GMT-0800 (PST) }\n\n// if its not a regular file path supported by stat stat is false.\n\n{ path: 'pipe:[19705393]',\n  info: { pos: '0', flags: '02000000' },\n  stat: false }\n\n{ path: 'anon_inode:[eventfd]',\n  info: { pos: '0', flags: '02004002' },\n  stat: false }\n\n```\n\n<a name=\"tcp\"></a>\n### procfs.tcp(cb)\n  - from /proc/net/tcp\n  - the tcp connection table as an array\n  - used to count connections/servers and get throughput per active connection\n  - note \"extra\" fields that appear after inode in the text file for tcp connections are placed under the _ key which is an object keyed off of the field offset of the value\n\n```js\n[ ....\n  { sl: '10:',\n    local_address: '127.0.0.1:24599',\n    rem_address: '0.0.0.0:0',\n    st: '0A',\n    tx_queue: '00000000',\n    rx_queue: '00000000',\n    tr: '00',\n    'tm->when': '00000000',\n    retrnsmt: '00000000',\n    uid: '118',\n    timeout: '0',\n    inode: '12881',\n    _: \n     { '12': '1',\n       '13': '0000000000000000',\n       '14': '100',\n       '15': '0',\n       '16': '0',\n       '17': '10',\n       '18': '-1' } } ]\n\n```\n\n<a name=\"udp\"></a>\n### procfs.udp(cb)\n  - from /proc/net/udp\n  - the udp connection table as an array\n  - used to count listeners/server and get throughput\n\n```js\n\n[ { sl: '1186:',\n    local_address: '127.0.0.1:52011',\n    rem_address: '0.0.0.0:0',\n    st: '07',\n    tx_queue: '00000000',\n    rx_queue: '00000000',\n    tr: '00',\n    'tm->when': '00000000',\n    retrnsmt: '00000000',\n    uid: '116',\n    timeout: '0',\n    inode: '12576',\n    ref: '2',\n    pointer: '0000000000000000',\n    drops: '0' },\n    ... ]\n\n```\n\n<a name=\"unix\"></a>\n### procfs.unix(cb)\n  - from /proc/net/unix\n  - the unix socket table as an array\n  \n```js\n[ { Num: '0000000000000000:',\n    RefCount: '00000002',\n    Protocol: '00000000',\n    Flags: '00010000',\n    Type: '0001',\n    St: '01',\n    Inode: '12597',\n    Path: '/var/run/mysqld/mysqld.sock' },\n  ...]\n```\n\n<a name=\"net\"></a>\n### procfs.net(cb)\n  - from /proc/net/dev\n  - calls back with and array of all network devices along with stats\n\n```js\n\n  [{ Interface: 'wlan0:',\n    bytes: { Receive: '301155854', Transmit: '75294312' },\n    packets: { Receive: '910966', Transmit: '372927' },\n    errs: { Receive: '0', Transmit: '0' },\n    drop: { Receive: '0', Transmit: '0' },\n    fifo: { Receive: '0', Transmit: '0' },\n    frame: { Receive: '0' },\n    compressed: { Receive: '0', Transmit: '0' },\n    multicast: { Receive: '0' },\n    colls: { Transmit: '0' },\n    carrier: { Transmit: '0' } },\n  { Interface: 'eth0:',\n    bytes: { Receive: '1202562365', Transmit: '111732378' },\n    packets: { Receive: '1868620', Transmit: '608933' },\n    errs: { Receive: '0', Transmit: '0' },\n    drop: { Receive: '0', Transmit: '0' },\n    fifo: { Receive: '0', Transmit: '0' },\n    frame: { Receive: '0' },\n    compressed: { Receive: '0', Transmit: '0' },\n    multicast: { Receive: '102222' },\n    colls: { Transmit: '0' },\n    carrier: { Transmit: '0' } }]\n\n```\n\n<a name=\"disk\"></a>\n### procfs.disk(cb)\n  - from /proc/diskstats\n  - calls back with an array of objects like this.\n\n```js\n\n[ { device_number: '1',\n    device_number_minor: '5',\n    device: 'ram5',\n    reads_completed: '0',\n    reads_merged: '0',\n    sectors_read: '0',\n    ms_reading: '0',\n    writes_completed: '0',\n    writes_merged: '0',\n    sectors_written: '0',\n    ms_writing: '0',\n    ios_pending: '0',\n    ms_io: '0',\n    ms_weighted_io: '0' },\n  ... many disks or disk like things...\n  { device_number: '8',\n    device_number_minor: '0',\n    device: 'sda',\n    reads_completed: '255428',\n    reads_merged: '208748',\n    sectors_read: '9462489',\n    ms_reading: '368008',\n    writes_completed: '1604578',\n    writes_merged: '735675',\n    sectors_written: '36575515',\n    ms_writing: '1680932',\n    ios_pending: '0',\n    ms_io: '410844',\n    ms_weighted_io: '2101936' } ]\n\n```\n\n<a name=\"wifi\"></a>\n### procfs.wifi(cb)\n  - from /proc/net/wireless\n  - calls back with wifi defices and stats\n\n```js\n[ { Interface: 'wlan0:',\n    status: '0000',\n    link: { Quality: '51.' },\n    level: { Quality: '-59.' },\n    noise: { Quality: '-256' },\n    nwid: { 'Discarded packets': '0' },\n    crypt: { 'Discarded packets': '0' },\n    frag: { 'Discarded packets': '0' },\n    retry: { 'Discarded packets': '40' },\n    misc: { 'Discarded packets': '54' },\n    beacon: { Missed: '0' } } ]\n```\n\n\n<a name=\"works\"></a>\n### procfs.works === true||false\n  - fs.exists on /proc\n  - if the procfs can be accessed this value is true\n\n```js\n\nif(!procfs.works) process.exit('oh no!')\n\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/soldair/node-procfs-stats/issues"
  },
  "homepage": "https://github.com/soldair/node-procfs-stats",
  "_id": "procfs-stats@0.0.4",
  "_shasum": "bebb9abc8bd13a625edcafe6ed0ea14f3c689b34",
  "_from": "git://github.com/soldair/node-procfs-stats.git",
  "_resolved": "git://github.com/soldair/node-procfs-stats.git#feca2a940805b31f9e7d5c0bd07c4e3f8d3d5303",
  "_fromGithub": true
}
